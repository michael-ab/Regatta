{"path":".obsidian/plugins/text-extractor/cache/f9f7afca3d398c445fd1ce4a584ce388.json","text":"Intro to Database Systems 15-445/15-645 Fall 2019 Andy Pavlo Computer Science Carnegie Mellon UniversityAP 01 Course Intro & Relational Model CMU 15-445/645 (Fall 2019) 2 CMU 15-445/645 (Fall 2019) Wait List Overview Course Logistics Relational Model Relational Algebra 3 CMU 15-445/645 (Fall 2019) WA I T L I S T There are currently 150 people on the waiting list. Max capacity is 100. We will enroll people based on your S3 position. 4 CMU 15-445/645 (Fall 2019) C O U R S E O V E RV I E W This course is on the design and implementation of disk-oriented database management systems. This is not a course on how to use a database to build applications or how to administer a database. → See CMU 95-703 (Heinz College) Database Applications (15-415/615) is not offered this semester. 5 CMU 15-445/645 (Fall 2019) C O U R S E O U T L I N E Relational Databases Storage Execution Concurrency Control Recovery Distributed Databases Potpourri 6 CMU 15-445/645 (Fall 2019) C O U R S E LO G I S T I C S Course Policies + Schedule: → Refer to course web page. Academic Honesty: → Refer to CMU policy page. → If you’re not sure, ask the professors. → Don’t be stupid. All discussion + announcements will be on Piazza. 7 CMU 15-445/645 (Fall 2019) T E X T B O O K Database System Concepts 7th Edition Silberschatz, Korth, & Sudarshan We will also provide lecture notes that covers topics not found in textbook. 8 CMU 15-445/645 (Fall 2019) C O U R S E RU B R I C Homeworks (15%) Projects (45%) Midterm Exam (20%) Final Exam (20%) Extra Credit (+10%) 9 CMU 15-445/645 (Fall 2019) H O M E W O R K S Five homework assignments throughout the semester. First homework is a SQL assignment. The rest will be pencil-and-paper assignments. All homework should be done individually. 10 CMU 15-445/645 (Fall 2019) P R O J E C T S You will build your own storage manager from scratch of the course of the semester. Each project builds on the previous one. We will not teach you how to write/debug C++17 11 CMU 15-445/645 (Fall 2019) B U S T U B All projects will use the new BusTub academic DBMS. → Source code will be released on Github. Architecture: → Disk-Oriented Storage → Volcano-style Query Processing → Pluggable APIs → Currently does not support SQL. 12 CMU 15-445/645 (Fall 2019) L AT E P O L I C Y You are allowed four slip days for either homework or projects. You lose 25% of an assignment’s points for every 24hrs it is late. Mark on your submission (1) how many days you are late and (2) how many late days you have left. 13 CMU 15-445/645 (Fall 2019) P L A G I A R I S M WA R N I N G The homework and projects must be your own work. They are not group assignments. You may not copy source code from other people or the web. Plagiarism will not be tolerated. See CMU's Policy on Academic Integrity for additional information. 14 CMU 15-445/645 (Fall 2019) D ATA B A S E R E S E A R C H Database Group Meetings → Mondays @ 4:30pm (GHC 8102) → https://db.cs.cmu.edu Advanced DBMS Developer Meetings → Tuesdays @ 12:00pm (GHC 8115) → https://github.com/cmu-db/terrierDatabases CMU 15-445/645 (Fall 2019) D ATA B A S E Organized collection of inter-related data that models some aspect of the real-world. Databases are core the component of most computer applications. 17 CMU 15-445/645 (Fall 2019) D ATA B A S E E X A M P L E Create a database that models a digital music store to keep track of artists and albums. Things we need store: → Information about Artists → What Albums those Artists released 18 CMU 15-445/645 (Fall 2019) F L AT F I L E S T R AWM A N Store our database as comma-separated value (CSV) files that we manage in our own code. → Use a separate file per entity. → The application has to parse the files each time they want to read/update records. 19 CMU 15-445/645 (Fall 2019) F L AT F I L E S T R AWM A N Create a database that models a digital music store. 20 \"Enter the Wu Tang\",\"Wu Tang Clan\",1993 \"St.Ides Mix Tape\",\"Wu Tang Clan\",1994 \"AmeriKKKa's Most Wanted\",\"Ice Cube\",1990 Album(name, artist, year) \"Wu Tang Clan\",1992,\"USA\" \"Notorious BIG\",1992,\"USA\" \"Ice Cube\",1989,\"USA\" Artist(name, year, country) CMU 15-445/645 (Fall 2019) F L AT F I L E S T R AWM A N Example: Get the year that Ice Cube went solo. 21 for line in file: record = parse(line) if “Ice Cube” == record[0]: print int(record[1]) \"Wu Tang Clan\",1992,\"USA\" \"Notorious BIG\",1992,\"USA\" \"Ice Cube\",1989,\"USA\" Artist(name, year, country) CMU 15-445/645 (Fall 2019) F L AT F I L E S : D ATA I N T E G R I T Y How do we ensure that the artist is the same for each album entry? What if somebody overwrites the album year with an invalid string? How do we store that there are multiple artists on an album? 22 CMU 15-445/645 (Fall 2019) F L AT F I L E S : I M P L E M E N TAT I O N How do you find a particular record? What if we now want to create a new application that uses the same database? What if two threads try to write to the same file at the same time? 23 CMU 15-445/645 (Fall 2019) F L AT F I L E S : D U R A B I L I T Y What if the machine crashes while our program is updating a record? What if we want to replicate the database on multiple machines for high availability? 24 CMU 15-445/645 (Fall 2019) D ATA B A S E M A N A G E M E N T S Y S T E M A DBMS is software that allows applications to store and analyze information in a database. A general-purpose DBMS is designed to allow the definition, creation, querying, update, and administration of databases. 25 CMU 15-445/645 (Fall 2019) E A R LY D B M S s Database applications were difficult to build and maintain. Tight coupling between logical and physical layers. You have to (roughly) know what queries your app would execute before you deployed the database. 26 Edgar F. Codd CMU 15-445/645 (Fall 2019) E A R LY D B M S s Database applications were difficult to build and maintain. Tight coupling between logical and physical layers. You have to (roughly) know what queries your app would execute before you deployed the database. 26 Edgar F. Codd CMU 15-445/645 (Fall 2019) R E L AT I O N A L M O D E L Proposed in 1970 by Ted Codd. Database abstraction to avoid this maintenance: → Store database in simple data structures. → Access data through high-level language. → Physical storage left up to implementation. 27 Edgar F. Codd CMU 15-445/645 (Fall 2019) D ATA M O D E L S A data model is collection of concepts for describing the data in a database. A schema is a description of a particular collection of data, using a given data model. 28 CMU 15-445/645 (Fall 2019) D ATA M O D E L Relational Key/Value Graph Document Column-family Array / Matrix Hierarchical Network 29 ← Most DBMSs CMU 15-445/645 (Fall 2019) D ATA M O D E L Relational Key/Value Graph Document Column-family Array / Matrix Hierarchical Network 29 ← NoSQL CMU 15-445/645 (Fall 2019) D ATA M O D E L Relational Key/Value Graph Document Column-family Array / Matrix Hierarchical Network 29 ← Machine Learning CMU 15-445/645 (Fall 2019) D ATA M O D E L Relational Key/Value Graph Document Column-family Array / Matrix Hierarchical Network 29 ← Obsolete / Rare CMU 15-445/645 (Fall 2019) D ATA M O D E L Relational Key/Value Graph Document Column-family Array / Matrix Hierarchical Network 29 ← This Course CMU 15-445/645 (Fall 2019) R E L AT I O N A L M O D E L Structure: The definition of relations and their contents. Integrity: Ensure the database’s contents satisfy constraints. Manipulation: How to access and modify a database’s contents. 30 CMU 15-445/645 (Fall 2019) R E L AT I O N A L M O D E L A relation is unordered set that contain the relationship of attributes that represent entities. A tuple is a set of attribute values (also known as its domain) in the relation. → Values are (normally) atomic/scalar. → The special value NULL is a member of every domain. 31 n-ary Relation Table with n columns = Artist(name, year, country) name year country Wu Tang Clan 1992 USA Notorious BIG 1992 USA Ice Cube 1989 USA CMU 15-445/645 (Fall 2019) R E L AT I O N A L M O D E L : P R I M A RY K E Y S A relation’s primary key uniquely identifies a single tuple. Some DBMSs automatically create an internal primary key if you don't define one. Auto-generation of unique integer primary keys: → SEQUENCE (SQL:2003) → AUTO_INCREMENT (MySQL) 32 Artist(name, year, country) name year country Wu Tang Clan 1992 USA Notorious BIG 1992 USA Ice Cube 1989 USA CMU 15-445/645 (Fall 2019) R E L AT I O N A L M O D E L : P R I M A RY K E Y S A relation’s primary key uniquely identifies a single tuple. Some DBMSs automatically create an internal primary key if you don't define one. Auto-generation of unique integer primary keys: → SEQUENCE (SQL:2003) → AUTO_INCREMENT (MySQL) 32 Artist(id, name, year, country) id name year country 123 Wu Tang Clan 1992 USA 456 Notorious BIG 1992 USA 789 Ice Cube 1989 USA CMU 15-445/645 (Fall 2019) R E L AT I O N A L M O D E L : F O R E I G N K E Y S A foreign key specifies that an attribute from one relation has to map to a tuple in another relation. 33 CMU 15-445/645 (Fall 2019) R E L AT I O N A L M O D E L : F O R E I G N K E Y S 33 Artist(id, name, year, country) Album(id, name, artists, year) id name artists year 11 Enter the Wu Tang 123 1993 22 St.Ides Mix Tape ??? 1994 33 AmeriKKKa's Most Wanted 789 1990 id name year country 123 Wu Tang Clan 1992 USA 456 Notorious BIG 1992 USA 789 Ice Cube 1989 USA CMU 15-445/645 (Fall 2019) R E L AT I O N A L M O D E L : F O R E I G N K E Y S 33 Artist(id, name, year, country) Album(id, name, artists, year) id name artists year 11 Enter the Wu Tang 123 1993 22 St.Ides Mix Tape ??? 1994 33 AmeriKKKa's Most Wanted 789 1990 id name year country 123 Wu Tang Clan 1992 USA 456 Notorious BIG 1992 USA 789 Ice Cube 1989 USA ArtistAlbum(artist_id, album_id) artist_id album_id 123 11 123 22 789 22 456 22 CMU 15-445/645 (Fall 2019) R E L AT I O N A L M O D E L : F O R E I G N K E Y S 33 Artist(id, name, year, country) id name year country 123 Wu Tang Clan 1992 USA 456 Notorious BIG 1992 USA 789 Ice Cube 1989 USA ArtistAlbum(artist_id, album_id) artist_id album_id 123 11 123 22 789 22 456 22 Album(id, name, year) id name year 11 Enter the Wu Tang 1993 22 St.Ides Mix Tape 1994 33 AmeriKKKa's Most Wanted 1990 CMU 15-445/645 (Fall 2019) R E L AT I O N A L M O D E L : F O R E I G N K E Y S 33 Artist(id, name, year, country) id name year country 123 Wu Tang Clan 1992 USA 456 Notorious BIG 1992 USA 789 Ice Cube 1989 USA ArtistAlbum(artist_id, album_id) artist_id album_id 123 11 123 22 789 22 456 22 Album(id, name, year) id name year 11 Enter the Wu Tang 1993 22 St.Ides Mix Tape 1994 33 AmeriKKKa's Most Wanted 1990 CMU 15-445/645 (Fall 2019) D ATA M A N I P U L AT I O N L A N G UA G E S ( D M L ) How to store and retrieve information from a database. Procedural: → The query specifies the (high-level) strategy the DBMS should use to find the desired result. Non-Procedural: → The query specifies only what data is wanted and not how to find it. 34 ← Relational Algebra CMU 15-445/645 (Fall 2019) D ATA M A N I P U L AT I O N L A N G UA G E S ( D M L ) How to store and retrieve information from a database. Procedural: → The query specifies the (high-level) strategy the DBMS should use to find the desired result. Non-Procedural: → The query specifies only what data is wanted and not how to find it. 34 ← Relational Algebra ← Relational Calculus CMU 15-445/645 (Fall 2019) R E L AT I O N A L A LG E B R A Fundamental operations to retrieve and manipulate tuples in a relation. → Based on set algebra. Each operator takes one or more relations as its inputs and outputs a new relation. → We can “chain” operators together to create more complex operations. 35 σ Select Projection ∪ Union ∩ Intersection Difference × Product ⋈ Join CMU 15-445/645 (Fall 2019) R E L AT I O N A L A LG E B R A : S E L E C T Choose a subset of the tuples from a relation that satisfies a selection predicate. → Predicate acts as a filter to retain only tuples that fulfill its qualifying requirement. → Can combine multiple predicates using conjunctions / disjunctions. Syntax: σpredicate(R) 36 σa_id='a2'∧ b_id>102(R) a_id b_id a1 101 a2 102 a2 103 a3 104 R(a_id,b_id) a_id b_id a2 103 σa_id='a2'(R) a_id b_id a2 102 a2 103 SELECT * FROM R WHERE a_id='a2' AND b_id>102; CMU 15-445/645 (Fall 2019) R E L AT I O N A L A LG E B R A : P R O J E C T I O N Generate a relation with tuples that contains only the specified attributes. → Can rearrange attributes’ ordering. → Can manipulate the values. Syntax: A1,A2,…,An(R) 37 Πb_id-100,a_id(σa_id='a2'(R)) a_id b_id a1 101 a2 102 a2 103 a3 104 R(a_id,b_id) b_id-100 a_id 2 a2 3 a2 SELECT b_id-100, a_id FROM R WHERE a_id = 'a2'; CMU 15-445/645 (Fall 2019) R E L AT I O N A L A LG E B R A : U N I O N Generate a relation that contains all tuples that appear in either only one or both input relations. Syntax: (R ∪ S) 38 a_id b_id a1 101 a2 102 a3 103 R(a_id,b_id) S(a_id,b_id) a_id b_id a3 103 a4 104 a5 105 (R ∪ S) a_id b_id a1 101 a2 102 a3 103 a3 103 a4 104 a5 105 (SELECT * FROM R) UNION ALL (SELECT * FROM S); CMU 15-445/645 (Fall 2019) R E L AT I O N A L A LG E B R A : I N T E R S E C T I O N Generate a relation that contains only the tuples that appear in both of the input relations. Syntax: (R ∩ S) 39 a_id b_id a1 101 a2 102 a3 103 R(a_id,b_id) S(a_id,b_id) a_id b_id a3 103 a4 104 a5 105 (R ∩ S) a_id b_id a3 103 (SELECT * FROM R) INTERSECT (SELECT * FROM S); CMU 15-445/645 (Fall 2019) R E L AT I O N A L A LG E B R A : D I F F E R E N C E Generate a relation that contains only the tuples that appear in the first and not the second of the input relations. Syntax: (R – S) 40 a_id b_id a1 101 a2 102 a3 103 R(a_id,b_id) S(a_id,b_id) a_id b_id a3 103 a4 104 a5 105 (R – S) a_id b_id a1 101 a2 102 (SELECT * FROM R) EXCEPT (SELECT * FROM S); CMU 15-445/645 (Fall 2019) R E L AT I O N A L A LG E B R A : P R O D U C T Generate a relation that contains all possible combinations of tuples from the input relations. Syntax: (R × S) 41 a_id b_id a1 101 a2 102 a3 103 R(a_id,b_id) S(a_id,b_id) a_id b_id a3 103 a4 104 a5 105 (R × S) R.a_id R.b_id S.a_id S.b_id a1 101 a3 103 a1 101 a4 104 a1 101 a5 105 a2 102 a3 103 a2 102 a4 104 a2 102 a5 105 a3 103 a3 103 a3 103 a4 104 a3 103 a5 105 SELECT * FROM R CROSS JOIN S; SELECT * FROM R, S; CMU 15-445/645 (Fall 2019) R E L AT I O N A L A LG E B R A : J O I N Generate a relation that contains all tuples that are a combination of two tuples (one from each input relation) with a common value(s) for one or more attributes. Syntax: (R ⋈ S) 42 a_id b_id a1 101 a2 102 a3 103 R(a_id,b_id) S(a_id,b_id) a_id b_id a3 103 a4 104 a5 105 (R ⋈ S) SELECT * FROM R NATURAL JOIN S; a_id b_id a3 103 CMU 15-445/645 (Fall 2019) R E L AT I O N A L A LG E B R A : E X T R A O P E R AT O R S Rename (ρ) Assignment (R←S) Duplicate Elimination (δ) Aggregation (γ) Sorting (τ) Division (R÷S) 43 CMU 15-445/645 (Fall 2019) O B S E RVAT I O N Relational algebra still defines the high-level steps of how to compute a query. → σb_id=102(R⋈S) vs. (R⋈(σb_id=102(S)) A better approach is to state the high-level answer that you want the DBMS to compute. → Retrieve the joined tuples from R and S where b_id equals 102. 44 CMU 15-445/645 (Fall 2019) R E L AT I O N A L M O D E L : Q U E R I E S The relational model is independent of any query language implementation. SQL is the de facto standard. 45 for line in file: record = parse(line) if “Ice Cube” == record[0]: print int(record[1]) SELECT year FROM artists WHERE name = \"Ice Cube“; CMU 15-445/645 (Fall 2019) C O N C LU S I O N Databases are ubiquitous. Relational algebra defines the primitives for processing queries on a relational database. We will see relational algebra again when we talk about query optimization + execution. 46","libVersion":"0.2.2","langs":""}