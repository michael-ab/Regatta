{"path":".obsidian/plugins/text-extractor/cache/18a59fa78f356cef71ce92396f073628.json","text":"Intro to Database Systems 15-445/15-645 Fall 2019 Andy Pavlo Computer Science Carnegie Mellon UniversityAP 03 Database Storage Part I CMU 15-445/645 (Fall 2019) A D M I N I S T R I V I A Homework #1 is due September 11th @ 11:59pm Project #1 will be released on September 11th 5 CMU 15-445/645 (Fall 2019) O V E RV I E W We now understand what a database looks like at a logical level and how to write queries to read/write data from it. We will next learn how to build software that manages a database. 7 CMU 15-445/645 (Fall 2019) C O U R S E O U T L I N E Relational Databases Storage Execution Concurrency Control Recovery Distributed Databases Potpourri 8 Query Planning Operator Execution Access Methods Buffer Pool Manager Disk Manager CMU 15-445/645 (Fall 2019) D I S K- O R I E N T E D A R C H I T E C T U R E The DBMS assumes that the primary storage location of the database is on non-volatile disk. The DBMS's components manage the movement of data between non-volatile and volatile storage. 9 CMU 15-445/645 (Fall 2019) S TO R A G E H I E R A R C H Y 10 CPU Registers CPU Caches DRAM SSD HDD Network Storage Faster Smaller Expensive Slower Larger Cheaper Volatile Random Access Byte-Addressable Non-Volatile Sequential Access Block-Addressable CMU 15-445/645 (Fall 2019) S TO R A G E H I E R A R C H Y 10 Memory Disk CMU 15-721 CPU Registers CPU Caches DRAM SSD HDD Network Storage Faster Smaller Expensive Slower Larger Cheaper CMU 15-445/645 (Fall 2019) S TO R A G E H I E R A R C H Y 10 Memory Disk CMU 15-721 CPU Registers CPU Caches DRAM SSD HDD Network Storage Faster Smaller Expensive Slower Larger Cheaper Non-volatile Memory CMU 15-445/645 (Fall 2019) A C C E S S T I M E S 11 0.5 ns L1 Cache Ref 7 ns L2 Cache Ref 100 ns DRAM 150,000 ns SSD 10,000,000 ns HDD ~30,000,000 ns Network Storage 1,000,000,000 ns Tape Archives 0.5 sec 7 sec 100 sec 1.7 days 16.5 weeks 11.4 months 31.7 years [Source] CMU 15-445/645 (Fall 2019) S Y S T E M D E S I G N G O A L S Allow the DBMS to manage databases that exceed the amount of memory available. Reading/writing to disk is expensive, so it must be managed carefully to avoid large stalls and performance degradation. 12 CMU 15-445/645 (Fall 2019) D I S K- O R I E N T E D D B M S 13 DiskDatabase File 1 HeaderDirectory 2 Header 3 Header … Pages4 Header 5 Header CMU 15-445/645 (Fall 2019) D I S K- O R I E N T E D D B M S 13 Disk MemoryDatabase File 1 HeaderDirectory 2 Header 3 Header … PagesBuffer Pool 4 Header 5 Header CMU 15-445/645 (Fall 2019) D I S K- O R I E N T E D D B M S 13 Disk MemoryDatabase File 1 HeaderDirectory 2 Header 3 Header … PagesBuffer Pool 4 Header 5 Header Execution Engine Get page #2 CMU 15-445/645 (Fall 2019) D I S K- O R I E N T E D D B M S 13 Disk MemoryDatabase File 1 HeaderDirectory 2 Header 3 Header … PagesBuffer Pool 4 Header 5 Header Execution Engine Get page #2 Directory CMU 15-445/645 (Fall 2019) D I S K- O R I E N T E D D B M S 13 Disk MemoryDatabase File 1 HeaderDirectory 2 Header 3 Header … PagesBuffer Pool 2 Header 4 Header 5 Header Execution Engine Get page #2 Directory CMU 15-445/645 (Fall 2019) D I S K- O R I E N T E D D B M S 13 Disk MemoryDatabase File 1 HeaderDirectory 2 Header 3 Header … PagesBuffer Pool 2 Header 4 Header 5 Header Execution Engine Get page #2 Directory Interpret the layout Pointer to page #2 CMU 15-445/645 (Fall 2019) D I S K- O R I E N T E D D B M S 13 Disk MemoryDatabase File 1 HeaderDirectory 2 Header 3 Header … PagesBuffer Pool 2 Header 4 Header 5 Header Execution Engine Get page #2 Directory Interpret the layout Pointer to page #2 Lectures 3-4 Lecture 5 Lecture 6 CMU 15-445/645 (Fall 2019) W H Y N OT U S E T H E O S ? One can use memory mapping (mmap) to store the contents of a file into a process' address space. The OS is responsible for moving data for moving the files' pages in and out of memory. 15 page1 page2 page3 page4 On-Disk File Virtual Memory page1 page2 page3 page4 Physical Memory CMU 15-445/645 (Fall 2019) W H Y N OT U S E T H E O S ? One can use memory mapping (mmap) to store the contents of a file into a process' address space. The OS is responsible for moving data for moving the files' pages in and out of memory. 15 page1 page2 page3 page4 On-Disk File Virtual Memory page1 page2 page3 page4 Physical Memory page1 CMU 15-445/645 (Fall 2019) W H Y N OT U S E T H E O S ? One can use memory mapping (mmap) to store the contents of a file into a process' address space. The OS is responsible for moving data for moving the files' pages in and out of memory. 15 page1 page2 page3 page4 On-Disk File Virtual Memory page1 page2 page3 page4 Physical Memory page1page1 CMU 15-445/645 (Fall 2019) W H Y N OT U S E T H E O S ? One can use memory mapping (mmap) to store the contents of a file into a process' address space. The OS is responsible for moving data for moving the files' pages in and out of memory. 15 page1 page2 page3 page4 On-Disk File Virtual Memory page1 page2 page3 page4 Physical Memory page1 page3 page1 CMU 15-445/645 (Fall 2019) W H Y N OT U S E T H E O S ? One can use memory mapping (mmap) to store the contents of a file into a process' address space. The OS is responsible for moving data for moving the files' pages in and out of memory. 15 page1 page2 page3 page4 On-Disk File Virtual Memory page1 page2 page3 page4 Physical Memory page1 page3 page1 page3 CMU 15-445/645 (Fall 2019) W H Y N OT U S E T H E O S ? One can use memory mapping (mmap) to store the contents of a file into a process' address space. The OS is responsible for moving data for moving the files' pages in and out of memory. 15 page1 page2 page3 page4 On-Disk File Virtual Memory page1 page2 page3 page4 Physical Memory page1 page3??? page1 page3 CMU 15-445/645 (Fall 2019) W H Y N OT U S E T H E O S ? What if we allow multiple threads to access the mmap files to hide page fault stalls? This works good enough for read-only access. It is complicated when there are multiple writers… 16 CMU 15-445/645 (Fall 2019) W H Y N OT U S E T H E O S ? There are some solutions to this problem: → madvise: Tell the OS how you expect to read certain pages. → mlock: Tell the OS that memory ranges cannot be paged out. → msync: Tell the OS to flush memory ranges out to disk. 17 Full Usage Partial Usage CMU 15-445/645 (Fall 2019) W H Y N OT U S E T H E O S ? DBMS (almost) always wants to control things itself and can do a better job at it. → Flushing dirty pages to disk in the correct order. → Specialized prefetching. → Buffer replacement policy. → Thread/process scheduling. The OS is not your friend. 18 CMU 15-445/645 (Fall 2019) D ATA B A S E S TO R A G E Problem #1: How the DBMS represents the database in files on disk. Problem #2: How the DBMS manages its memory and move data back-and-forth from disk. 19 ← Today CMU 15-445/645 (Fall 2019) TO D AY ' S A G E N D A File Storage Page Layout Tuple Layout 20 CMU 15-445/645 (Fall 2019) F I L E S TO R A G E The DBMS stores a database as one or more files on disk. → The OS doesn't know anything about the contents of these files. Early systems in the 1980s used custom filesystems on raw storage. → Some \"enterprise\" DBMSs still support this. → Most newer DBMSs do not do this. 21 CMU 15-445/645 (Fall 2019) S TO R A G E M A N A G E R The storage manager is responsible for maintaining a database's files. → Some do their own scheduling for reads and writes to improve spatial and temporal locality of pages. It organizes the files as a collection of pages. → Tracks data read/written to pages. → Tracks the available space. 22 CMU 15-445/645 (Fall 2019) D ATA B A S E PA G E S A page is a fixed-size block of data. → It can contain tuples, meta-data, indexes, log records… → Most systems do not mix page types. → Some systems require a page to be self-contained. Each page is given a unique identifier. → The DBMS uses an indirection layer to map page ids to physical locations. 23 CMU 15-445/645 (Fall 2019) D ATA B A S E PA G E S There are three different notions of \"pages\" in a DBMS: → Hardware Page (usually 4KB) → OS Page (usually 4KB) → Database Page (512B-16KB) By hardware page, we mean at what level the device can guarantee a \"failsafe write\". 24 16KB 8KB 4KB CMU 15-445/645 (Fall 2019) PA G E S TO R A G E A R C H I T E C T U R E Different DBMSs manage pages in files on disk in different ways. → Heap File Organization → Sequential / Sorted File Organization → Hashing File Organization At this point in the hierarchy we don't need to know anything about what is inside of the pages. 25 CMU 15-445/645 (Fall 2019) D ATA B A S E H E A P A heap file is an unordered collection of pages where tuples that are stored in random order. → Create / Get / Write / Delete Page → Must also support iterating over all pages. Need meta-data to keep track of what pages exist and which ones have free space. Two ways to represent a heap file: → Linked List → Page Directory 26 CMU 15-445/645 (Fall 2019) H E A P F I L E : L I N K E D L I S T Maintain a header page at the beginning of the file that stores two pointers: → HEAD of the free page list. → HEAD of the data page list. Each page keeps track of the number of free slots in itself. 27 Header Page Data Page Data Page Data Page Data … … Free Page List Data Page List CMU 15-445/645 (Fall 2019) H E A P F I L E : L I N K E D L I S T Maintain a header page at the beginning of the file that stores two pointers: → HEAD of the free page list. → HEAD of the data page list. Each page keeps track of the number of free slots in itself. 27 Header Page Data Page Data Page Data Page Data … … Free Page List Data Page List CMU 15-445/645 (Fall 2019) H E A P F I L E : PA G E D I R E C T O R Y The DBMS maintains special pages that tracks the location of data pages in the database files. The directory also records the number of free slots per page. The DBMS has to make sure that the directory pages are in sync with the data pages. 28 Directory… Page Data Page Data Page Data… CMU 15-445/645 (Fall 2019) TO D AY ' S A G E N D A File Storage Page Layout Tuple Layout 29 CMU 15-445/645 (Fall 2019) PA G E H E A D E R Every page contains a header of meta- data about the page's contents. → Page Size → Checksum → DBMS Version → Transaction Visibility → Compression Information Some systems require pages to be self- contained (e.g., Oracle). 30 Data Page Header CMU 15-445/645 (Fall 2019) PA G E L AYO U T For any page storage architecture, we now need to understand how to organize the data stored inside of the page. → We are still assuming that we are only storing tuples. Two approaches: → Tuple-oriented → Log-structured 31 CMU 15-445/645 (Fall 2019) T U P L E S TO R A G E How to store tuples in a page? 32 Page Num Tuples = 0 CMU 15-445/645 (Fall 2019) T U P L E S TO R A G E How to store tuples in a page? Strawman Idea: Keep track of the number of tuples in a page and then just append a new tuple to the end. 32 Page Num Tuples = 0 Tuple #1 Tuple #2 Tuple #3 Num Tuples = 3 CMU 15-445/645 (Fall 2019) T U P L E S TO R A G E How to store tuples in a page? Strawman Idea: Keep track of the number of tuples in a page and then just append a new tuple to the end. → What happens if we delete a tuple? 32 Page Num Tuples = 0 Tuple #1 Tuple #3 Num Tuples = 3Num Tuples = 2 CMU 15-445/645 (Fall 2019) T U P L E S TO R A G E How to store tuples in a page? Strawman Idea: Keep track of the number of tuples in a page and then just append a new tuple to the end. → What happens if we delete a tuple? 32 Page Num Tuples = 0 Tuple #1 Tuple #3 Tuple #4 Num Tuples = 3 CMU 15-445/645 (Fall 2019) T U P L E S TO R A G E How to store tuples in a page? Strawman Idea: Keep track of the number of tuples in a page and then just append a new tuple to the end. → What happens if we delete a tuple? → What happens if we have a variable- length attribute? 32 Page Num Tuples = 0 Tuple #1 Tuple #3 Tuple #4 Num Tuples = 3 CMU 15-445/645 (Fall 2019) S LOT T E D PA G E S The most common layout scheme is called slotted pages. The slot array maps \"slots\" to the tuples' starting position offsets. The header keeps track of: → The # of used slots → The offset of the starting location of the last slot used. 33 Header Tuple #4 Tuple #2 Tuple #3 Tuple #1 Fixed/Var-length Tuple Data Slot Array CMU 15-445/645 (Fall 2019) S LOT T E D PA G E S The most common layout scheme is called slotted pages. The slot array maps \"slots\" to the tuples' starting position offsets. The header keeps track of: → The # of used slots → The offset of the starting location of the last slot used. 33 Header Tuple #4 Tuple #2 Tuple #3 Tuple #1 Fixed/Var-length Tuple Data Slot Array CMU 15-445/645 (Fall 2019) S LOT T E D PA G E S The most common layout scheme is called slotted pages. The slot array maps \"slots\" to the tuples' starting position offsets. The header keeps track of: → The # of used slots → The offset of the starting location of the last slot used. 33 Header Tuple #4 Tuple #2 Tuple #3 Tuple #1 Fixed/Var-length Tuple Data Slot Array CMU 15-445/645 (Fall 2019) LO G -S T RU C T U R E D F I L E O R G A N I Z AT I O N Instead of storing tuples in pages, the DBMS only stores log records. The system appends log records to the file of how the database was modified: → Inserts store the entire tuple. → Deletes mark the tuple as deleted. → Updates contain the delta of just the attributes that were modified. 34…New EntriesINSERT id=1,val=a INSERT id=2,val=b DELETE id=4 UPDATE val=X (id=3) UPDATE val=Y (id=4) INSERT id=3,val=c Page CMU 15-445/645 (Fall 2019) LO G -S T RU C T U R E D F I L E O R G A N I Z AT I O N To read a record, the DBMS scans the log backwards and \"recreates\" the tuple to find what it needs. 35 INSERT id=1,val=a INSERT id=2,val=b DELETE id=4 UPDATE val=X (id=3) UPDATE val=Y (id=4) INSERT id=3,val=c…Reads Page CMU 15-445/645 (Fall 2019) LO G -S T RU C T U R E D F I L E O R G A N I Z AT I O N To read a record, the DBMS scans the log backwards and \"recreates\" the tuple to find what it needs. Build indexes to allow it to jump to locations in the log. 35 INSERT id=1,val=a INSERT id=2,val=b DELETE id=4 UPDATE val=X (id=3) UPDATE val=Y (id=4) INSERT id=3,val=c… id=1 id=2 id=3 id=4 Page CMU 15-445/645 (Fall 2019) LO G -S T RU C T U R E D F I L E O R G A N I Z AT I O N To read a record, the DBMS scans the log backwards and \"recreates\" the tuple to find what it needs. Build indexes to allow it to jump to locations in the log. Periodically compact the log. 35 id=1,val=a id=2,val=b id=3,val=X id=4,val=Y Page CMU 15-445/645 (Fall 2019) TO D AY ' S A G E N D A File Storage Page Layout Tuple Layout 37 CMU 15-445/645 (Fall 2019) T U P L E L AYO U T A tuple is essentially a sequence of bytes. It's the job of the DBMS to interpret those bytes into attribute types and values. 38 CMU 15-445/645 (Fall 2019) Tuple T U P L E H E A D E R Each tuple is prefixed with a header that contains meta-data about it. → Visibility info (concurrency control) → Bit Map for NULL values. We do not need to store meta-data about the schema. 39 Header Attribute Data CMU 15-445/645 (Fall 2019) T U P L E D ATA Attributes are typically stored in the order that you specify them when you create the table. This is done for software engineering reasons. We re-order attributes automatically in CMU's new DBMS… 40 Tuple Header a b c d e CREATE TABLE foo ( a INT PRIMARY KEY, b INT NOT NULL, c INT, d DOUBLE, e FLOAT ); CMU 15-445/645 (Fall 2019) D E N O R M A L I Z E D T U P L E D ATA Can physically denormalize (e.g., \"pre join\") related tuples and store them together in the same page. → Potentially reduces the amount of I/O for common workload patterns. → Can make updates more expensive. 41 CREATE TABLE foo ( a INT PRIMARY KEY, b INT NOT NULL, ); CREATE TABLE bar ( c INT PRIMARY KEY, a INT ⮱REFERENCES foo (a), ); CMU 15-445/645 (Fall 2019) D E N O R M A L I Z E D T U P L E D ATA Can physically denormalize (e.g., \"pre join\") related tuples and store them together in the same page. → Potentially reduces the amount of I/O for common workload patterns. → Can make updates more expensive. 41 foo Header c a Header c a Header c a bar Header a b CMU 15-445/645 (Fall 2019) D E N O R M A L I Z E D T U P L E D ATA Can physically denormalize (e.g., \"pre join\") related tuples and store them together in the same page. → Potentially reduces the amount of I/O for common workload patterns. → Can make updates more expensive. 41 foo c c c … foo bar Header a b CMU 15-445/645 (Fall 2019) D E N O R M A L I Z E D T U P L E D ATA Can physically denormalize (e.g., \"pre join\") related tuples and store them together in the same page. → Potentially reduces the amount of I/O for common workload patterns. → Can make updates more expensive. Not a new idea. → IBM System R did this in the 1970s. → Several NoSQL DBMSs do this without calling it physical denormalization. 41 foo c c c … foo bar Header a b CMU 15-445/645 (Fall 2019) R E C O R D I D S The DBMS needs a way to keep track of individual tuples. Each tuple is assigned a unique record identifier. → Most common: page_id + offset/slot → Can also contain file location info. An application cannot rely on these ids to mean anything. 42 CTID (4-bytes) ROWID (10-bytes) ROWID (8-bytes) CMU 15-445/645 (Fall 2019) C O N C LU S I O N Database is organized in pages. Different ways to track pages. Different ways to store pages. Different ways to store tuples. 43 CMU 15-445/645 (Fall 2019) N E X T C L A S S Value Representation Storage Models 44","libVersion":"0.2.2","langs":""}