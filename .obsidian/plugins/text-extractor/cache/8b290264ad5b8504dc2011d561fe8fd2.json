{"path":".obsidian/plugins/text-extractor/cache/8b290264ad5b8504dc2011d561fe8fd2.json","text":"Intro to Database Systems 15-445/15-645 Fall 2019 Andy Pavlo Computer Science Carnegie Mellon UniversityAP 02 Advanced SQL CMU 15-445/645 (Fall 2019) R E L AT I O N A L L A N G UA G E S User only needs to specify the answer that they want, not how to compute it. The DBMS is responsible for efficient evaluation of the query. → Query optimizer: re-orders operations and generates query plan 2 CMU 15-445/645 (Fall 2019) S Q L H I S TO R Y Originally “SEQUEL” from IBM’s System R prototype. → Structured English Query Language → Adopted by Oracle in the 1970s. IBM releases DB2 in 1983. ANSI Standard in 1986. ISO in 1987 → Structured Query Language 3 CMU 15-445/645 (Fall 2019) S Q L H I S TO R Y Current standard is SQL:2016 → SQL:2016 → JSON, Polymorphic tables → SQL:2011 → Temporal DBs, Pipelined DML → SQL:2008 → TRUNCATE, Fancy sorting → SQL:2003 → XML, windows, sequences, auto-gen IDs. → SQL:1999 → Regex, triggers, OO Most DBMSs at least support SQL-92 → System Comparison: http://troels.arvin.dk/db/rdbms/ 4 CMU 15-445/645 (Fall 2019) R E L AT I O N A L L A N G UA G E S Data Manipulation Language (DML) Data Definition Language (DDL) Data Control Language (DCL) Also includes: → View definition → Integrity & Referential Constraints → Transactions Important: SQL is based on bags (duplicates) not sets (no duplicates). 5 CMU 15-445/645 (Fall 2019) Aggregations + Group By String / Date / Time Operations Output Control + Redirection Nested Queries Common Table Expressions Window Functions 6 CMU 15-445/645 (Fall 2019) E X A M P L E D ATA B A S E 7 student(sid,name,login,gpa) enrolled(sid,cid,grade) course(cid,name) sid name login age gpa 53666 Kanye kayne@cs 39 4.0 53688 Bieber jbieber@cs 22 3.9 53655 Tupac shakur@cs 26 3.5 sid cid grade 53666 15-445 C 53688 15-721 A 53688 15-826 B 53655 15-445 B 53666 15-721 C cid name 15-445 Database Systems 15-721 Advanced Database Systems 15-826 Data Mining 15-823 Advanced Topics in Databases CMU 15-445/645 (Fall 2019) A G G R E G AT E S Functions that return a single value from a bag of tuples: → AVG(col)→ Return the average col value. → MIN(col)→ Return minimum col value. → MAX(col)→ Return maximum col value. → SUM(col)→ Return sum of values in col. → COUNT(col)→ Return # of values for col. 8 CMU 15-445/645 (Fall 2019) A G G R E G AT E S Aggregate functions can only be used in the SELECT output list. Get # of students with a “@cs” login: 9 SELECT COUNT(login) AS cnt FROM student WHERE login LIKE '%@cs' CMU 15-445/645 (Fall 2019) A G G R E G AT E S Aggregate functions can only be used in the SELECT output list. Get # of students with a “@cs” login: 9 SELECT COUNT(login) AS cnt FROM student WHERE login LIKE '%@cs' CMU 15-445/645 (Fall 2019) A G G R E G AT E S Aggregate functions can only be used in the SELECT output list. Get # of students with a “@cs” login: 9 SELECT COUNT(login) AS cnt FROM student WHERE login LIKE '%@cs' SELECT COUNT(*) AS cnt FROM student WHERE login LIKE '%@cs' CMU 15-445/645 (Fall 2019) A G G R E G AT E S Aggregate functions can only be used in the SELECT output list. Get # of students with a “@cs” login: 9 SELECT COUNT(login) AS cnt FROM student WHERE login LIKE '%@cs' SELECT COUNT(*) AS cnt FROM student WHERE login LIKE '%@cs' SELECT COUNT(1) AS cnt FROM student WHERE login LIKE '%@cs' CMU 15-445/645 (Fall 2019) M U LT I P L E A G G R E G AT E S Get the number of students and their average GPA that have a “@cs” login. 10 SELECT AVG(gpa), COUNT(sid) FROM student WHERE login LIKE '%@cs' AVG(gpa) COUNT(sid) 3.25 12 CMU 15-445/645 (Fall 2019) D I S T I N C T A G G R E G AT E S COUNT, SUM, AVG support DISTINCT Get the number of unique students that have an “@cs” login. 11 SELECT COUNT(DISTINCT login) FROM student WHERE login LIKE '%@cs' COUNT(DISTINCT login) 10 CMU 15-445/645 (Fall 2019) A G G R E G AT E S Output of other columns outside of an aggregate is undefined. Get the average GPA of students enrolled in each course. 12 SELECT AVG(s.gpa), e.cid FROM enrolled AS e, student AS s WHERE e.sid = s.sid AVG(s.gpa) e.cid 3.5 ??? CMU 15-445/645 (Fall 2019) G R O U P BY Project tuples into subsets and calculate aggregates against each subset. 13 SELECT AVG(s.gpa), e.cid FROM enrolled AS e, student AS s WHERE e.sid = s.sid GROUP BY e.cid e.sid s.sid s.gpa e.cid 53435 53435 2.25 15-721 53439 53439 2.70 15-721 56023 56023 2.75 15-826 59439 59439 3.90 15-826 53961 53961 3.50 15-826 58345 58345 1.89 15-445 CMU 15-445/645 (Fall 2019) G R O U P BY Project tuples into subsets and calculate aggregates against each subset. 13 AVG(s.gpa) e.cid 2.46 15-721 3.39 15-826 1.89 15-445 SELECT AVG(s.gpa), e.cid FROM enrolled AS e, student AS s WHERE e.sid = s.sid GROUP BY e.cid e.sid s.sid s.gpa e.cid 53435 53435 2.25 15-721 53439 53439 2.70 15-721 56023 56023 2.75 15-826 59439 59439 3.90 15-826 53961 53961 3.50 15-826 58345 58345 1.89 15-445 CMU 15-445/645 (Fall 2019) G R O U P BY Project tuples into subsets and calculate aggregates against each subset. 13 AVG(s.gpa) e.cid 2.46 15-721 3.39 15-826 1.89 15-445 SELECT AVG(s.gpa), e.cid FROM enrolled AS e, student AS s WHERE e.sid = s.sid GROUP BY e.cid e.sid s.sid s.gpa e.cid 53435 53435 2.25 15-721 53439 53439 2.70 15-721 56023 56023 2.75 15-826 59439 59439 3.90 15-826 53961 53961 3.50 15-826 58345 58345 1.89 15-445 CMU 15-445/645 (Fall 2019) G R O U P BY Non-aggregated values in SELECT output clause must appear in GROUP BY clause. 14 SELECT AVG(s.gpa), e.cid, s.name FROM enrolled AS e, student AS s WHERE e.sid = s.sid GROUP BY e.cid X CMU 15-445/645 (Fall 2019) G R O U P BY Non-aggregated values in SELECT output clause must appear in GROUP BY clause. 14 SELECT AVG(s.gpa), e.cid, s.name FROM enrolled AS e, student AS s WHERE e.sid = s.sid GROUP BY e.cid X SELECT AVG(s.gpa), e.cid, s.name FROM enrolled AS e, student AS s WHERE e.sid = s.sid GROUP BY e.cid, s.name CMU 15-445/645 (Fall 2019) H AV I N G Filters results based on aggregation computation. Like a WHERE clause for a GROUP BY 15 SELECT AVG(s.gpa) AS avg_gpa, e.cid FROM enrolled AS e, student AS s WHERE e.sid = s.sid AND avg_gpa > 3.9 GROUP BY e.cid X CMU 15-445/645 (Fall 2019) H AV I N G Filters results based on aggregation computation. Like a WHERE clause for a GROUP BY 15 SELECT AVG(s.gpa) AS avg_gpa, e.cid FROM enrolled AS e, student AS s WHERE e.sid = s.sid AND avg_gpa > 3.9 GROUP BY e.cid X SELECT AVG(s.gpa) AS avg_gpa, e.cid FROM enrolled AS e, student AS s WHERE e.sid = s.sid GROUP BY e.cid HAVING avg_gpa > 3.9; CMU 15-445/645 (Fall 2019) H AV I N G Filters results based on aggregation computation. Like a WHERE clause for a GROUP BY 15 SELECT AVG(s.gpa) AS avg_gpa, e.cid FROM enrolled AS e, student AS s WHERE e.sid = s.sid AND avg_gpa > 3.9 GROUP BY e.cid AVG(s.gpa) e.cid 3.75 15-415 3.950000 15-721 3.900000 15-826 avg_gpa e.cid 3.950000 15-721 X SELECT AVG(s.gpa) AS avg_gpa, e.cid FROM enrolled AS e, student AS s WHERE e.sid = s.sid GROUP BY e.cid HAVING avg_gpa > 3.9; CMU 15-445/645 (Fall 2019) S T R I N G O P E R AT I O N S 24 String Case String Quotes SQL-92 Sensitive Single Only Postgres Sensitive Single Only MySQL Insensitive Single/Double SQLite Sensitive Single/Double DB2 Sensitive Single Only Oracle Sensitive Single Only WHERE UPPER(name) = UPPER('KaNyE') WHERE name = \"KaNyE\" MySQL SQL-92 CMU 15-445/645 (Fall 2019) S T R I N G O P E R AT I O N S LIKE is used for string matching. String-matching operators → '%' Matches any substring (including empty strings). → '_' Match any one character 17 SELECT * FROM enrolled AS e WHERE e.cid LIKE '15-%' SELECT * FROM student AS s WHERE s.login LIKE '%@c_' CMU 15-445/645 (Fall 2019) S T R I N G O P E R AT I O N S SQL-92 defines string functions. → Many DBMSs also have their own unique functions Can be used in either output and predicates: 18 SELECT SUBSTRING(name,0,5) AS abbrv_name FROM student WHERE sid = 53688 SELECT * FROM student AS s WHERE UPPER(e.name) LIKE 'KAN%' CMU 15-445/645 (Fall 2019) S T R I N G O P E R AT I O N S SQL standard says to use || operator to concatenate two or more strings together. 19 SELECT name FROM student WHERE login = LOWER(name) + '@cs' MSSQL SELECT name FROM student WHERE login = LOWER(name) || '@cs' SQL-92 SELECT name FROM student WHERE login = CONCAT(LOWER(name), '@cs') MySQL CMU 15-445/645 (Fall 2019) D AT E / T I M E O P E R AT I O N S Operations to manipulate and modify DATE/TIME attributes. Can be used in either output and predicates. Support/syntax varies wildly… Demo: Get the # of days since the beginning of the year. 20 CMU 15-445/645 (Fall 2019) O U T P U T R E D I R E C T I O N Store query results in another table: → Table must not already be defined. → Table will have the same # of columns with the same types as the input. 21 CREATE TABLE CourseIds ( SELECT DISTINCT cid FROM enrolled); SELECT DISTINCT cid INTO CourseIds FROM enrolled; MySQL SQL-92 CMU 15-445/645 (Fall 2019) O U T P U T R E D I R E C T I O N Insert tuples from query into another table: → Inner SELECT must generate the same columns as the target table. → DBMSs have different options/syntax on what to do with duplicates. 22 INSERT INTO CourseIds (SELECT DISTINCT cid FROM enrolled); SQL-92 CMU 15-445/645 (Fall 2019) O U T P U T C O N T R O L ORDER BY <column*> [ASC|DESC] → Order the output tuples by the values in one or more of their columns. 23 SELECT sid, grade FROM enrolled WHERE cid = '15-721' ORDER BY grade sid grade 53123 A 53334 A 53650 B 53666 D CMU 15-445/645 (Fall 2019) O U T P U T C O N T R O L ORDER BY <column*> [ASC|DESC] → Order the output tuples by the values in one or more of their columns. 23 SELECT sid, grade FROM enrolled WHERE cid = '15-721' ORDER BY grade SELECT sid FROM enrolled WHERE cid = '15-721' ORDER BY grade DESC, sid ASC sid grade 53123 A 53334 A 53650 B 53666 D sid 53666 53650 53123 53334 CMU 15-445/645 (Fall 2019) O U T P U T C O N T R O L LIMIT <count> [offset] → Limit the # of tuples returned in output. → Can set an offset to return a “range” 24 SELECT sid, name FROM student WHERE login LIKE '%@cs' LIMIT 10 CMU 15-445/645 (Fall 2019) O U T P U T C O N T R O L LIMIT <count> [offset] → Limit the # of tuples returned in output. → Can set an offset to return a “range” 24 SELECT sid, name FROM student WHERE login LIKE '%@cs' LIMIT 10 SELECT sid, name FROM student WHERE login LIKE '%@cs' LIMIT 20 OFFSET 10 CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Queries containing other queries. They are often difficult to optimize. Inner queries can appear (almost) anywhere in query. 26 SELECT name FROM student WHERE sid IN (SELECT sid FROM enrolled) Outer Query Inner Query CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Get the names of students in '15-445' 27 SELECT name FROM student WHERE ... sid in the set of people that take 15-445 CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Get the names of students in '15-445' 27 SELECT name FROM student WHERE ... SELECT name FROM student WHERE ... SELECT sid FROM enrolled WHERE cid = '15-445' CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Get the names of students in '15-445' 27 SELECT name FROM student WHERE ... SELECT name FROM student WHERE ... SELECT sid FROM enrolled WHERE cid = '15-445' SELECT name FROM student WHERE sid IN ( SELECT sid FROM enrolled WHERE cid = '15-445' ) CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Get the names of students in '15-445' 27 SELECT name FROM student WHERE ... SELECT name FROM student WHERE ... SELECT sid FROM enrolled WHERE cid = '15-445' SELECT name FROM student WHERE sid IN ( SELECT sid FROM enrolled WHERE cid = '15-445' ) CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S ALL→ Must satisfy expression for all rows in sub- query ANY→ Must satisfy expression for at least one row in sub-query. IN→ Equivalent to '=ANY()' . EXISTS→ At least one row is returned. 28 CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Get the names of students in ‘15-445’ 29 SELECT name FROM student WHERE sid = ANY( SELECT sid FROM enrolled WHERE cid = '15-445' ) CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Get the names of students in ‘15-445’ 29 SELECT name FROM student WHERE sid = ANY( SELECT sid FROM enrolled WHERE cid = '15-445' ) SELECT (SELECT S.name FROM student AS S WHERE S.sid = E.sid) AS sname FROM enrolled AS E WHERE cid = '15-445' CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Find student record with the highest id that is enrolled in at least one course. 30 SELECT MAX(e.sid), s.name FROM enrolled AS e, student AS s WHERE e.sid = s.sid; CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Find student record with the highest id that is enrolled in at least one course. Won't work in SQL-92. This runs in SQLite, but not Postgres or MySQL (v5.7 with strict mode). 30 SELECT MAX(e.sid), s.name FROM enrolled AS e, student AS s WHERE e.sid = s.sid; X CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Find student record with the highest id that is enrolled in at least one course. 31 SELECT sid, name FROM student WHERE ... \"Is greater than every other sid\" CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Find student record with the highest id that is enrolled in at least one course. 31 SELECT sid, name FROM student WHERE ... SELECT sid, name FROM student WHERE sid SELECT sid FROM enrolled is greater than every CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Find student record with the highest id that is enrolled in at least one course. 31 SELECT sid, name FROM student WHERE ... SELECT sid, name FROM student WHERE sid SELECT sid FROM enrolled is greater than every SELECT sid, name FROM student WHERE sid => ALL( SELECT sid FROM enrolled ) sid name 53688 Bieber CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Find student record with the highest id that is enrolled in at least one course. 31 SELECT sid, name FROM student WHERE ... SELECT sid, name FROM student WHERE sid SELECT sid FROM enrolled is greater than every SELECT sid, name FROM student WHERE sid => ALL( SELECT sid FROM enrolled ) SELECT sid, name FROM student WHERE sid IN ( SELECT MAX(sid) FROM enrolled ) CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Find student record with the highest id that is enrolled in at least one course. 31 SELECT sid, name FROM student WHERE ... SELECT sid, name FROM student WHERE sid SELECT sid FROM enrolled is greater than every SELECT sid, name FROM student WHERE sid => ALL( SELECT sid FROM enrolled ) SELECT sid, name FROM student WHERE sid IN ( SELECT MAX(sid) FROM enrolled ) SELECT sid, name FROM student WHERE sid IN ( SELECT sid FROM enrolled ORDER BY sid DESC LIMIT 1 ) CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Find all courses that has no students enrolled in it. 32 SELECT * FROM course WHERE ... sid cid grade 53666 15-445 C 53688 15-721 A 53688 15-826 B 53655 15-445 B 53666 15-721 C cid name 15-445 Database Systems 15-721 Advanced Database Systems 15-826 Data Mining 15-823 Advanced Topics in Databases CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Find all courses that has no students enrolled in it. 32 SELECT * FROM course WHERE ... SELECT * FROM course WHERE NOT EXISTS( ) CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Find all courses that has no students enrolled in it. 32 SELECT * FROM course WHERE ... SELECT * FROM course WHERE NOT EXISTS( ) SELECT * FROM course WHERE NOT EXISTS( SELECT * FROM enrolled WHERE course.cid = enrolled.cid ) cid name 15-823 Advanced Topics in Databases CMU 15-445/645 (Fall 2019) N E S T E D Q U E R I E S Find all courses that has no students enrolled in it. 32 SELECT * FROM course WHERE ... SELECT * FROM course WHERE NOT EXISTS( ) SELECT * FROM course WHERE NOT EXISTS( SELECT * FROM enrolled WHERE course.cid = enrolled.cid ) cid name 15-823 Advanced Topics in Databases CMU 15-445/645 (Fall 2019) W I N D O W F U N C T I O N S Performs a \"sliding\" calculation across a set of tuples that are related. Like an aggregation but tuples are not grouped into a single output tuples. 33 SELECT ... FUNC-NAME(...) OVER (...) FROM tableName CMU 15-445/645 (Fall 2019) W I N D O W F U N C T I O N S Performs a \"sliding\" calculation across a set of tuples that are related. Like an aggregation but tuples are not grouped into a single output tuples. 33 SELECT ... FUNC-NAME(...) OVER (...) FROM tableName Aggregation Functions Special Functions Can also sort CMU 15-445/645 (Fall 2019) W I N D O W F U N C T I O N S Aggregation functions: → Anything that we discussed earlier Special window functions: → ROW_NUMBER()→ # of the current row → RANK()→ Order position of the current row. 34 SELECT *, ROW_NUMBER() OVER () AS row_num FROM enrolled sid cid grade row_num 53666 15-445 C 1 53688 15-721 A 2 53688 15-826 B 3 53655 15-445 B 4 53666 15-721 C 5 CMU 15-445/645 (Fall 2019) W I N D O W F U N C T I O N S Aggregation functions: → Anything that we discussed earlier Special window functions: → ROW_NUMBER()→ # of the current row → RANK()→ Order position of the current row. 34 SELECT *, ROW_NUMBER() OVER () AS row_num FROM enrolled sid cid grade row_num 53666 15-445 C 1 53688 15-721 A 2 53688 15-826 B 3 53655 15-445 B 4 53666 15-721 C 5 CMU 15-445/645 (Fall 2019) W I N D O W F U N C T I O N S The OVER keyword specifies how to group together tuples when computing the window function. Use PARTITION BY to specify group. 35 SELECT cid, sid, ROW_NUMBER() OVER (PARTITION BY cid) FROM enrolled ORDER BY cid cid sid row_number 15-445 53666 1 15-445 53655 2 15-721 53688 1 15-721 53666 2 15-826 53688 1 CMU 15-445/645 (Fall 2019) W I N D O W F U N C T I O N S The OVER keyword specifies how to group together tuples when computing the window function. Use PARTITION BY to specify group. 35 SELECT cid, sid, ROW_NUMBER() OVER (PARTITION BY cid) FROM enrolled ORDER BY cid cid sid row_number 15-445 53666 1 15-445 53655 2 15-721 53688 1 15-721 53666 2 15-826 53688 1 CMU 15-445/645 (Fall 2019) W I N D O W F U N C T I O N S You can also include an ORDER BY in the window grouping to sort entries in each group. 36 SELECT *, ROW_NUMBER() OVER (ORDER BY cid) FROM enrolled ORDER BY cid CMU 15-445/645 (Fall 2019) W I N D O W F U N C T I O N S Find the student with the highest grade for each course. 37 SELECT * FROM ( SELECT *, RANK() OVER (PARTITION BY cid ORDER BY grade ASC) AS rank FROM enrolled) AS ranking WHERE ranking.rank = 1 CMU 15-445/645 (Fall 2019) W I N D O W F U N C T I O N S Find the student with the highest grade for each course. 37 SELECT * FROM ( SELECT *, RANK() OVER (PARTITION BY cid ORDER BY grade ASC) AS rank FROM enrolled) AS ranking WHERE ranking.rank = 1 Group tuples by cid Then sort by grade CMU 15-445/645 (Fall 2019) W I N D O W F U N C T I O N S Find the student with the highest grade for each course. 37 SELECT * FROM ( SELECT *, RANK() OVER (PARTITION BY cid ORDER BY grade ASC) AS rank FROM enrolled) AS ranking WHERE ranking.rank = 1 Group tuples by cid Then sort by grade CMU 15-445/645 (Fall 2019) C O M M O N TA B L E E X P R E S S I O N S Provides a way to write auxiliary statements for use in a larger query. → Think of it like a temp table just for one query. Alternative to nested queries and views. 39 WITH cteName AS ( SELECT 1 ) SELECT * FROM cteName CMU 15-445/645 (Fall 2019) C O M M O N TA B L E E X P R E S S I O N S Provides a way to write auxiliary statements for use in a larger query. → Think of it like a temp table just for one query. Alternative to nested queries and views. 39 WITH cteName AS ( SELECT 1 ) SELECT * FROM cteName CMU 15-445/645 (Fall 2019) C O M M O N TA B L E E X P R E S S I O N S You can bind output columns to names before the AS keyword. 40 WITH cteName (col1, col2) AS ( SELECT 1, 2 ) SELECT col1 + col2 FROM cteName CMU 15-445/645 (Fall 2019) C O M M O N TA B L E E X P R E S S I O N S Find student record with the highest id that is enrolled in at least one course. 41 WITH cteSource (maxId) AS ( SELECT MAX(sid) FROM enrolled ) SELECT name FROM student, cteSource WHERE student.sid = cteSource.maxId CMU 15-445/645 (Fall 2019) C O M M O N TA B L E E X P R E S S I O N S Find student record with the highest id that is enrolled in at least one course. 41 WITH cteSource (maxId) AS ( SELECT MAX(sid) FROM enrolled ) SELECT name FROM student, cteSource WHERE student.sid = cteSource.maxId CMU 15-445/645 (Fall 2019) C T E R E C U R S I O N Print the sequence of numbers from 1 to 10. Demo: Postgres CTE! 42 WITH RECURSIVE cteSource (counter) AS ( (SELECT 1) UNION ALL (SELECT counter + 1 FROM cteSource WHERE counter < 10) ) SELECT * FROM cteSource CMU 15-445/645 (Fall 2019) C O N C LU S I O N SQL is not a dead language. You should (almost) always strive to compute your answer as a single SQL statement. 43 CMU 15-445/645 (Fall 2019) N E X T C L A S S Storage Management 44","libVersion":"0.2.2","langs":""}